// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  firstname    String
  surname      String
  middlename   String?
  phoneNumber  String   @unique
  email        String   @unique
  password     String
  krisID       String?  @unique
  refreshToken String?
  createdBy    String?
  createdDate  DateTime @default(now())
  modifiedBy   String?
  modifiedDate DateTime @updatedAt

  role    Role
  status  Bo_Status?
  version Int?

  @@unique([phoneNumber, email])
}

enum Role {
  SUPER_ADMIN
  SUPPORT
  STAFF
}

enum Bo_Status {
  ACTIVE
  LEAVE
  TERMINATED
  DECEASED
  RESIGNED
  PROBATION
  NOTICE_PERIOD
}

model Organization {
  id             String          @id @default(uuid())
  orgLogo        String?
  orgName        String          @unique
  orgWebsite     String          @unique
  orgEmail       String          @unique
  orgNumber      String          @unique
  orgAddress     String
  orgAddress2    String?
  orgState       String
  orgCity        String?
  orgCountry     String
  orgType        String?
  orgZipCode     String?
  orgDateFounded DateTime?       @db.Date
  orgRCnumber    String          @unique
  orgIndustry    String
  orgKrisId      String?         @unique
  team           Team[]
  employees      Employee[]
  department     Department[]
  Org_Branch     Org_Branch[]
  Org_Clientele  Org_Clientele[]
  Onboarding     Onboarding[]
  Appraisal      Appraisal[]
  HireRequest    HireRequest[]
  leavePlan      Leave[]
  Allowance      Allowance[]
  Deduction      Deduction[]
  Bonuses        Bonuses[]
  Payslip        Payslip[]
  PayGrade       PayGrade[]

  createdBy  String?
  modifiedBy String?

  createdDate  DateTime   @default(now()) @db.Date
  modifiedDate DateTime   @updatedAt @db.Date
  PayGroup     PayGroup[]

  @@unique([orgName, orgWebsite, orgEmail, orgNumber, orgRCnumber])
}

model Org_Branch {
  id          String @id @default(uuid())
  name        String @unique
  location    String
  state       String
  city        String
  country     String
  branch_code String @unique

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])

  department Department[]
  employees  Employee[]   @relation("Org_BranchToEmployees")

  branchManager   Employee? @relation(name: "Org_BranchManaging", fields: [branchManagerId], references: [id])
  branchManagerId String?   @unique
  createdBy       String?
  createdDate     DateTime  @default(now()) @db.Date

  @@index([organizationId])
}

model Org_Clientele {
  id   String @id @default(uuid())
  name String

  location       String
  state          String
  city           String
  country        String
  clientele_code String @unique

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  employees      Employee[]
  createdDate    DateTime     @default(now())
  createdBy      String?

  @@index([organizationId])
}

model Department {
  id   String @id @default(uuid())
  name String @unique

  teams     Team[]
  employees Employee[]

  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])

  Org_Branch   Org_Branch? @relation(fields: [org_BranchId], references: [id])
  org_BranchId String?
  createdDate  DateTime    @default(now()) @db.Date
  createdBy    String?
}

model Team {
  id   String @id @default(uuid())
  name String

  departmentId   String
  Department     Department   @relation(fields: [departmentId], references: [id])
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  teamMembers    Employee[]   @relation("teamEmplBelongsTo")
  createdDate    DateTime     @default(now()) @db.Date
  createdBy      String?
  teamLeader     Employee?    @relation(name: "TeamLeading", fields: [teamLeaderId], references: [id])
  teamLeaderId   String?      @unique
}

// model TeamLead {
//   id             String       @id @default(uuid())
//   employeeId     String
//   Employee       Employee     @relation(fields: [employeeId], references: [id])
//   teamId         String       @unique
//   Team           Team         @relation(fields: [teamId], references: [id])
//   organizationId String
//   Organization   Organization @relation(fields: [organizationId], references: [id])
//
//   @@index([organizationId, employeeId])
// }

enum Employee_Role {
  MANAGEMENT
  HUMAN_RESOURCE
  FINANCE
  REGULAR
}

enum Employee_Status {
  ACTIVE
  LEAVE
  TERMINATED
  DECEASED
  RESIGNED
  PROBATION
  NOTICE_PERIOD
}

model Employee {
  id                   String  @id @default(uuid())
  email                String  @unique
  password             String
  firstname            String
  lastname             String
  middleName           String?
  krisID               String? @unique
  idNumber             String  @unique
  phoneNumber          String  @unique
  refreshToken         String?
  personalEmail        String? @unique
  workPhoneNumber      String?
  personalPhoneNumber2 String?
  designation          String?
  employment_type      String?

  dateOfConfirmation DateTime? @db.Date
  dateOfJoining      DateTime? @db.Date

  role               Employee_Role[]
  status             Employee_Status?
  employeeLeave      EmployeeLeave[]
  leaveApplication   LeaveApplication[]
  EmployeeOnboarding EmployeeOnboarding[]
  Employee_Appraisal Employee_Appraisal[]
  HireRequest        HireRequest[]
  Payslip            Payslip[]
  organizationId     String
  Organization       Organization         @relation(fields: [organizationId], references: [id])

  org_Branch   Org_Branch? @relation("Org_BranchToEmployees", fields: [org_BranchId], references: [id])
  org_BranchId String?

  managedBranch     Org_Branch? @relation(name: "Org_BranchManaging")
  teamEmployeeLeads Team?       @relation(name: "TeamLeading")

  departmentId String?
  Department   Department? @relation(fields: [departmentId], references: [id])

  Org_Clientele   Org_Clientele? @relation(fields: [org_ClienteleId], references: [id])
  org_ClienteleId String?

  teamId String?
  Team   Team?   @relation("teamEmplBelongsTo", fields: [teamId], references: [id])

  PayGrade   PayGrade? @relation(fields: [payGradeId], references: [id])
  payGradeId String?

  PayGroup   PayGroup? @relation(fields: [payGroupId], references: [id])
  payGroupId String?

  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime @default(now()) @db.Date
  modifiedDate DateTime @updatedAt

  @@unique([email, idNumber, phoneNumber, personalEmail])
}

model Allowance {
  id          String  @id @default(uuid())
  name        String
  description String?
  type        String
  amount      Float
  frequency   String
  taxable     String

  PayGroup   PayGroup? @relation(fields: [payGroupId], references: [id])
  payGroupId String?

  PayGrade   PayGrade? @relation(fields: [payGradeId], references: [id])
  payGradeId String?

  payslipId String?
  Payslip   Payslip? @relation(fields: [payslipId], references: [id])

  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime @default(now()) @db.Date
  modifiedDate DateTime @updatedAt
}

model Deduction {
  id          String  @id @default(uuid())
  name        String
  description String?
  relief      String?
  groupBy     String?
  type        String
  amount      Float

  payslipId String?
  Payslip   Payslip? @relation(fields: [payslipId], references: [id])

  PayGrade   PayGrade? @relation(fields: [payGradeId], references: [id])
  payGradeId String?

  PayGroup   PayGroup? @relation(fields: [payGroupId], references: [id])
  payGroupId String?

  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime @default(now()) @db.Date
  modifiedDate DateTime @updatedAt
}

model Bonuses {
  id          String  @id @default(uuid())
  name        String
  description String?
  frequency   String
  taxable     String
  amount      Float

  PayGrade   PayGrade? @relation(fields: [payGradeId], references: [id])
  payGradeId String?

  PayGroup   PayGroup? @relation(fields: [payGroupId], references: [id])
  payGroupId String?

  payslipId String?
  Payslip   Payslip? @relation(fields: [payslipId], references: [id])

  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime @default(now()) @db.Date
  modifiedDate DateTime @updatedAt
}

model PayGrade {
  id          String      @id @default(uuid())
  name        String
  description String?
  employees   Employee[]
  allowances  Allowance[]
  deductions  Deduction[]
  bonuses     Bonuses[]

  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime @default(now()) @db.Date
  modifiedDate DateTime @updatedAt
}

model PayGroup {
  id          String      @id @default(uuid())
  name        String
  description String?
  employees   Employee[]
  allowances  Allowance[]
  deductions  Deduction[]
  bonuses     Bonuses[]

  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime @default(now()) @db.Date
  modifiedDate DateTime @updatedAt
}

model Payslip {
  id         String   @id @default(uuid())
  date       DateTime @db.Date
  employeeId String
  Employee   Employee @relation(fields: [employeeId], references: [id])

  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  allowances Allowance[]
  deductions Deduction[]
  Bonuses    Bonuses[]

  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime @default(now()) @db.Date
  modifiedDate DateTime @updatedAt
}

model Appraisal {
  id                 String               @id @default(uuid())
  name               String
  description        String
  startDate          DateTime
  endDate            DateTime
  section            Appraisal_Section[]
  Employee_Appraisal Employee_Appraisal[]
  Organization       Organization         @relation(fields: [organizationId], references: [id])
  organizationId     String

  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime @default(now()) @db.Date
  modifiedDate DateTime @updatedAt
}

model Appraisal_Section {
  id          String @id @default(uuid())
  name        String
  description String

  question    Appraisal_Question[]
  Appraisal   Appraisal?           @relation(fields: [appraisalId], references: [id])
  appraisalId String?

  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime @default(now()) @db.Date
  modifiedDate DateTime @updatedAt
}

model Appraisal_Question {
  id   String @id @default(uuid())
  text String

  option                      Appraisal_Question_Options[]
  Appraisal_Question_Response Appraisal_Question_Response[]
  response_type               Appraisal_ResponseType

  Appraisal_Section   Appraisal_Section? @relation(fields: [appraisal_SectionId], references: [id])
  appraisal_SectionId String?

  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime @default(now()) @db.Date
  modifiedDate DateTime @updatedAt
}

model Appraisal_Question_Options {
  id    String @id @default(uuid())
  text  String
  score Int

  Appraisal_Question   Appraisal_Question? @relation(fields: [appraisal_QuestionId], references: [id])
  appraisal_QuestionId String?

  createdBy                   String?
  modifiedBy                  String?
  createdDate                 DateTime                      @default(now()) @db.Date
  modifiedDate                DateTime                      @updatedAt
  Appraisal_Question_Response Appraisal_Question_Response[]
}

model Appraisal_Question_Response {
  id    String  @id @default(uuid())
  text  String?
  score Int?

  option            Appraisal_Question_Options? @relation(fields: [question_optionID], references: [id])
  question_optionID String?

  question     Appraisal_Question? @relation(fields: [questionID], references: [id])
  questionID   String?
  createdBy    String?
  modifiedBy   String?
  createdDate  DateTime            @default(now()) @db.Date
  modifiedDate DateTime            @updatedAt
}

model Employee_Appraisal {
  id          String    @id @default(uuid())
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  appraisal   Appraisal @relation(fields: [appraisalId], references: [id])
  appraisalId String
}

enum Appraisal_ResponseType {
  TEXT
  OPTION
  RATING
  SCORE
}

model Leave {
  id               String             @id @default(uuid())
  name             String
  duration         Float
  type             LeaveType?
  employeeLeave    EmployeeLeave[]
  leaveApplication LeaveApplication[]

  Organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  createdBy   String?
  createdDate DateTime @default(now()) @db.Date
}

enum LeaveType {
  PAID
  UNPAID
}

model Onboarding {
  id              String               @id @default(uuid())
  name            String
  description     String
  employeeOnboard EmployeeOnboarding[]
  organizationId  String
  Organization    Organization         @relation(fields: [organizationId], references: [id])
  createdDate     DateTime             @default(now()) @db.Date
  createdBy       String?
}

model EmployeeOnboarding {
  id           String      @id @default(uuid())
  name         String
  description  String
  completed    Boolean     @default(false)
  Onboarding   Onboarding? @relation(fields: [onboardingId], references: [id])
  onboardingId String?
  employeeId   String
  employee     Employee    @relation(fields: [employeeId], references: [id])
  createdDate  DateTime    @default(now()) @db.Date
  createdBy    String?
}

model EmployeeLeave {
  id                String @id @default(uuid())
  remainingDuration Int
  leaveName         String

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  leaveId     String
  leave       Leave    @relation(fields: [leaveId], references: [id])
  createdDate DateTime @default(now()) @db.Date
  createdBy   String?

  @@unique([employeeId, leaveId])
}

model LeaveApplication {
  id String @id @default(uuid())

  startDate DateTime
  endDate   DateTime
  duration  Int
  leaveName String

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])

  leaveId String
  leave   Leave  @relation(fields: [leaveId], references: [id])

  leaveStatus    LeaveApplicationStatus?
  supervDesicion SupervisorDecision?

  createdDate DateTime @default(now()) @db.Date
  createdBy   String?
}

enum LeaveApplicationStatus {
  PENDING
  APPROVED
  DECLINED
  COMPLETED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  DECLINED
  COMPLETED
}

enum SupervisorDecision {
  APPROVED
  DECLINED
}

model HireRequest {
  id                 String              @id @default(uuid())
  title              String
  numberNeeded       String
  yoe                String
  qualifications     String
  skillSet           String?
  other              String
  urgency            String?
  hireStatus         ApplicationStatus   @default(PENDING)
  supervisorDecision SupervisorDecision?
  employeeId         String?
  employee           Employee?           @relation(fields: [employeeId], references: [id])
  organizationID     String?
  Organization       Organization?       @relation(fields: [organizationID], references: [id])
  createdDate        DateTime            @default(now()) @db.Date
  createdBy          String?
}
